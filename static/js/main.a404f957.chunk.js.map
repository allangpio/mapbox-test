{"version":3,"sources":["components/Mapbox.js","App.js","reportWebVitals.js","index.js"],"names":["mapboxApiKey","mapStyle","width","height","Mapbox","useRef","useState","viewport","latitude","longitude","zoom","state","setState","mapboxApiAccessToken","onSelected","item","console","log","hideOnSelect","value","onViewportChange","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0OAKMA,EAAe,+FAEfC,EAAW,CACbC,MAAO,OACPC,OAAQ,KA2DGC,EAxDA,WACUC,mBAArB,IADiB,EAEKC,oBAAU,MAFf,gCAGKA,mBAAS,QAHd,gCAIOA,mBAAS,IAJhB,gCAKSA,mBAAS,CAC/BC,SAAU,CACNC,SAAU,SACVC,WAAY,SACZC,KAAM,OATG,mBAKVC,EALU,KAKHC,EALG,KAmBTL,EAAaI,EAAbJ,SAYR,OACI,gCACI,8BACI,cAAC,IAAD,CACIM,qBAAsBb,EACtBc,WAvBG,SAACP,EAAUQ,GAC1BH,EAAS,CAAEL,aACXS,QAAQC,IAAIN,EAAO,QACnBK,QAAQC,IAAIF,EAAM,SAqBNR,SAAUA,EACVW,cAAc,EACdC,MAAM,OAKd,cAAC,IAAD,qCACIN,qBAAsBb,EACtBC,SAAS,sCACLM,GACAN,GAJR,IAKImB,iBAAkB,SAACb,GAAD,OAAcK,EAAS,CAAEL,qBChD5Cc,MAXf,WACE,OACE,sBAAKC,UAAU,MAAf,UACE,4CAGA,cAAC,EAAD,QCISC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a404f957.chunk.js","sourcesContent":["import React, { useRef, useState, useEffect } from 'react';\nimport ReactMapGL from 'react-map-gl';\n//import mapboxgl from 'mapbox-gl/dist/mapbox-gl-csp';\nimport Geocoder from 'react-mapbox-gl-geocoder';\n\nconst mapboxApiKey = 'pk.eyJ1IjoiZ3Bpb2FsbGFuIiwiYSI6ImNrbWNkbHcxdDFvOTQyd3A5ejV6c3dtdDUifQ.-lHwEqgzETYh0DybVDjFOQ';\n\nconst mapStyle = {\n    width: '100%',\n    height: 600\n}\n\nconst Mapbox = () => {\n    const mapContainer = useRef();\n    const [lng, setLng] = useState(-70.9);\n    const [lat, setLat] = useState(42.35);\n    const [zoom, setZoom] = useState(9);\n    const [state, setState] = useState({\n        viewport: {\n            latitude: 45.50884,\n            longitude: -73.58781,\n            zoom: 15\n        }\n    })\n\n    const onSelected = (viewport, item) => {\n        setState({ viewport });\n        console.log(state, 'view')\n        console.log(item, 'item')\n    }\n\n    const { viewport } = state;\n\n    // useEffect(() => {\n    //     const map = new mapboxgl.Map({\n    //         container: mapContainer.current,\n    //         style: 'mapbox://styles/mapbox/streets-v11',\n    //         center: [lng, lat],\n    //         zoom: zoom\n    //     });\n    //     return () => map.remove();\n    // }, []);\n\n    return (\n        <div>\n            <div>\n                <Geocoder\n                    mapboxApiAccessToken={mapboxApiKey}\n                    onSelected={onSelected}\n                    viewport={viewport}\n                    hideOnSelect={true}\n                    value=\"\"\n                //queryParams={params}\n                />\n\n            </div>\n            <ReactMapGL\n                mapboxApiAccessToken={mapboxApiKey}\n                mapStyle=\"mapbox://styles/mapbox/streets-v11\"\n                {...viewport}\n                {...mapStyle}\n                onViewportChange={(viewport) => setState({ viewport })}\n            >\n            </ReactMapGL>\n        </div>\n    )\n}\n\nexport default Mapbox;","import Mapbox from './components/Mapbox'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <p>\n        MapBox Test\n      </p>\n      <Mapbox />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}